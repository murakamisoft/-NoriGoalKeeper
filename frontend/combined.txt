以下が最新のソース一覧
----- C:\Users\nori\workspace\NoriGoalKeeper\frontend\src\App.jsx ----- 
// src/App.jsx
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { CssBaseline } from '@mui/material';
import Dashboard from './pages/Dashboard';
import GoalList from './pages/GoalList';
import GoalDetail from './pages/GoalDetail';
import GoalRegistrationPage from './pages/GoalRegistrationPage';
import GoalEditPage from './pages/GoalEditPage';
import Header from './components/Header';

const App = () => {
  return (
    <Router>
      <CssBaseline />
      <Header />
      <Routes>
        <Route path="/" element={<Dashboard />} />
        <Route path="/goals" element={<GoalList />} />
        <Route path="/goals/:goalId" element={<GoalDetail />} />
        <Route path="/goals/register" element={<GoalRegistrationPage />} />
        <Route path="/goals/:goalId/edit" element={<GoalEditPage />} />
        {/* 必要に応じて他のページも追加 */}
      </Routes>
    </Router>
  );
};

export default App;
   
----- C:\Users\nori\workspace\NoriGoalKeeper\frontend\src\components\Header.jsx ----- 
// src/components/Header.jsx
import React from 'react';
import { AppBar, Toolbar, Typography, Button } from '@mui/material';
import { Link } from 'react-router-dom';

const Header = () => {
  return (
    <AppBar position="static">
      <Toolbar>
        <Typography variant="h6" sx={{ flexGrow: 1 }}>
          NoriGoalKeeper
        </Typography>
        <Button color="inherit" component={Link} to="/">
          ダッシュボード
        </Button>
        <Button color="inherit" component={Link} to="/goals">
          目標
        </Button>
        <Button color="inherit" component={Link} to="/goals/register">
          目標追加
        </Button>
        <Button color="inherit" component={Link} to="/login">
          ログイン
        </Button>
      </Toolbar>
    </AppBar>
  );
};

export default Header;
   
----- C:\Users\nori\workspace\NoriGoalKeeper\frontend\src\pages\Dashboard.jsx ----- 
// src/pages/Dashboard.jsx
import React, { useEffect, useState } from 'react';
import { Container, Typography, Grid, Card, CardContent, LinearProgress } from '@mui/material';
import axios from 'axios';

const Dashboard = () => {
  const [goals, setGoals] = useState([]);

  useEffect(() => {
    // 仮のユーザーIDをローカルストレージに保存
    const userId = 1; // 仮のユーザーID
    localStorage.setItem('userId', userId);

    // APIから目標データを取得
    axios.get(`http://localhost:8080/api/goals/user/${userId}`)
      .then(response => {
        setGoals(response.data);
      })
      .catch(error => {
        console.error('目標データの取得に失敗しました:', error);
      });
  }, []);

  return (
    <Container>
      <Typography variant="h4" gutterBottom sx={{ marginTop: 4 }}>
        ダッシュボード
      </Typography>
      <Grid container spacing={3}>
        {goals.map(goal => (
          <Grid item xs={12} sm={6} md={4} key={goal.goalId}>
            <Card>
              <CardContent>
                <Typography variant="h6">
                  {goal.title}
                </Typography>
                <Typography color="textSecondary" gutterBottom>
                  目標達成予定日: {goal.targetDate} {/* target_dateはtargetDateに修正 */}
                </Typography>
                <Typography variant="body2" paragraph>
                  {goal.description}
                </Typography>
                <LinearProgress variant="determinate" value={goal.progressRate || 0} /> {/* progress_rateはprogressRateに修正 */}
                <Typography color="textSecondary" align="right">
                  進捗率: {goal.progressRate || 0}%
                </Typography>
              </CardContent>
            </Card>
          </Grid>
        ))}
      </Grid>
    </Container>
  );
};

export default Dashboard;
   
----- C:\Users\nori\workspace\NoriGoalKeeper\frontend\src\pages\GoalDetail.jsx ----- 
// src/pages/GoalDetail.jsx
import React, { useEffect, useState } from 'react';
import { useParams, Link } from 'react-router-dom';
import { Container, Typography, Button, CircularProgress } from '@mui/material';
import axios from 'axios';

const GoalDetail = () => {
  const { goalId } = useParams(); // URLパラメータから目標IDを取得
  const [goal, setGoal] = useState(null); // 目標データを保存するステート
  const [loading, setLoading] = useState(true); // ローディング状態を管理

  // APIから目標詳細を取得
  useEffect(() => {
    const fetchGoal = async () => {
      try {
        console.log("start2");
        const response = await axios.get(`http://localhost:8080/api/goals/${goalId}`);
        console.log("goalDetail : " + response.data);
        setGoal(response.data);
      } catch (error) {
        console.error("Failed to fetch goal:", error);
      } finally {
        setLoading(false); // ローディング完了
      }
    };
    if (goalId) {
      console.log("start1");
      fetchGoal();
    } else {
      console.log("not start1 ; " + goalId);
    }
  }, [goalId]);

  console.log("aaa : " + goalId);
  if (loading) {
    return (
      <Container>
        <CircularProgress />
      </Container>
    ); // ローディング中はスピナーを表示
  }

  if (!goal) {
    return (
      <Container>
        <Typography variant="h6" color="error">
          Goal not found!
        </Typography>
      </Container>
    ); // 目標が見つからない場合のメッセージ
  }

  return (
    <Container>
      <Typography variant="h4" gutterBottom sx={{ marginTop: 4 }}>
        {goal.title}
      </Typography>
      <Typography variant="body1" gutterBottom>
        {goal.description || 'No description available.'}
      </Typography>
      <Typography variant="subtitle1">
        Target Date: {goal.targetDate ? new Date(goal.targetDate).toLocaleDateString() : 'N/A'}
      </Typography>

      <Button
        variant="contained"
        color="primary"
        component={Link}
        to={`/goals/${goal.goalId}/edit`}
        sx={{ marginTop: 2 }}
      >
        Edit Goal
      </Button>
      <Button
        variant="contained"
        color="secondary"
        component={Link}
        to="/goals"
        sx={{ marginTop: 2, marginLeft: 2 }}
      >
        Back to Goals
      </Button>
    </Container>
  );
};

export default GoalDetail;
   
----- C:\Users\nori\workspace\NoriGoalKeeper\frontend\src\pages\GoalEditPage.jsx ----- 
// src/pages/GoalEditPage.jsx
import React, { useEffect, useState } from 'react';
import { useParams, Link, useNavigate } from 'react-router-dom';
import { Container, TextField, Button, Typography } from '@mui/material';
import axios from 'axios';

const GoalEditPage = () => {
  const { goalId } = useParams(); // URLから目標IDを取得
  const [goal, setGoal] = useState(null); // 目標データを保存するステート
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [targetDate, setTargetDate] = useState('');
  const [error, setError] = useState(null);
  const navigate = useNavigate(); // ナビゲーション用フック

  useEffect(() => {
    const fetchGoal = async () => {
      try {
        const response = await axios.get(`http://localhost:8080/api/goals/${goalId}`);
        setGoal(response.data);
        setTitle(response.data.title);
        setDescription(response.data.description);
        setTargetDate(response.data.targetDate);
      } catch (error) {
        console.error("目標データの取得に失敗:", error);
        setError("目標データを取得できませんでした。");
      }
    };

    if (goalId) {
      fetchGoal();
    }
  }, [goalId]);

  const handleSubmit = async (event) => {
    event.preventDefault();
    try {
      const userId = localStorage.getItem('userId'); // ローカルストレージからユーザーIDを取得
      const response = await axios.put(`http://localhost:8080/api/goals`, {
        goalId,       // 編集する目標のID
        userId,      // ユーザーID
        title,       // 新しい目標タイトル
        description, // 新しい目標の説明
        targetDate,  // 新しい締め切り
        createdAt: goal.createdAt, // 既存の作成日時
        updatedAt: new Date().toISOString(), // 更新日時を現在に設定
      });
      console.log('更新成功:', response.data);
      navigate(`/goals/${goalId}`); // 編集後、目標詳細ページにリダイレクト
    } catch (err) {
      console.error('更新失敗:', err);
      setError("目標の更新に失敗しました。");
    }
  };

  if (!goal) {
    return (
      <Container>
        <Typography variant="h6" color="error">
          目標が見つかりません！
        </Typography>
      </Container>
    );
  }

  return (
    <Container maxWidth="sm">
      <Typography variant="h4" gutterBottom>
        目標を編集
      </Typography>
      {error && <Typography color="error">{error}</Typography>}

      <form onSubmit={handleSubmit}>
        <TextField
          label="目標タイトル"
          fullWidth
          required
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          margin="normal"
        />
        <TextField
          label="目標の説明"
          fullWidth
          required
          value={description}
          onChange={(e) => setDescription(e.target.value)}
          margin="normal"
          multiline
          rows={4}
        />
        <TextField
          label="締め切り"
          type="date"
          fullWidth
          required
          value={targetDate ? new Date(targetDate).toISOString().split('T')[0] : ''}
          onChange={(e) => setTargetDate(e.target.value)}
          margin="normal"
          InputLabelProps={{
            shrink: true,
          }}
        />
        <Button type="submit" variant="contained" color="primary" fullWidth style={{ marginTop: '16px' }}>
          更新
        </Button>
        <Button
          variant="outlined"
          component={Link}
          to={`/goals/${goalId}`}
          style={{ marginTop: '8px', marginLeft: '8px' }}
        >
          キャンセル
        </Button>
      </form>
    </Container>
  );
};

export default GoalEditPage;
   
----- C:\Users\nori\workspace\NoriGoalKeeper\frontend\src\pages\GoalList.jsx ----- 
// src/pages/GoalList.jsx
import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import { Container, Typography, Button, List, ListItem, ListItemText, Divider } from '@mui/material';
import DeleteIcon from '@mui/icons-material/Delete'; // ごみ箱アイコンをインポート
import axios from 'axios';

const GoalList = () => {
  const [goals, setGoals] = useState([]);

  // APIから目標一覧を取得
  const fetchGoals = async () => {
    try {
      const userId = localStorage.getItem('userId');
      const response = await axios.get(`http://localhost:8080/api/goals/user/${userId}`);
      console.log("goals user response.data : " + JSON.stringify(response.data));
      setGoals(response.data);
    } catch (error) {
      console.error("Failed to fetch goals:", error);
    }
  };

  useEffect(() => {
    fetchGoals();
  }, []);

  // 目標削除処理
  const handleDelete = async (goalId) => {
    if (window.confirm('本当にこの目標を削除しますか？')) { // 確認ダイアログを追加
      try {
        await axios.delete(`http://localhost:8080/api/goals/${goalId}`); // 削除APIを呼び出す
        fetchGoals(); // 削除後、リストを再取得
        console.log(`Goal with ID ${goalId} deleted successfully.`);
      } catch (error) {
        console.error("Failed to delete goal:", error);
      }
    }
  };

  return (
    <Container>
      <Typography variant="h4" gutterBottom sx={{ marginTop: 4 }}>
        Goals
      </Typography>
      <Button
        variant="contained"
        color="primary"
        component={Link}
        to="/goals/new"
        sx={{ marginBottom: 2 }}
      >
        Create New Goal
      </Button>

      <List>
        {goals.map(goal => (
          <React.Fragment key={goal.goalId}>
            <ListItem button component={Link} to={`/goals/${goal.goalId}`}>
              <ListItemText
                primary={goal.title}
                secondary={goal.description}
              />
              <Button
                onClick={(e) => {
                  e.stopPropagation(); // リストアイテムのクリックイベントを停止
                  handleDelete(goal.goalId);
                }}
                color="secondary"
                size="small" // 小さめのボタン
                sx={{ marginLeft: 2 }} // アイコンの間隔を調整
              >
                <DeleteIcon />
              </Button>
            </ListItem>
            <Divider />
          </React.Fragment>
        ))}
      </List>
    </Container>
  );
};

export default GoalList;
   
----- C:\Users\nori\workspace\NoriGoalKeeper\frontend\src\pages\GoalRegistrationPage.jsx ----- 
// src/pages/GoalRegistrationPage.jsx
import React, { useState } from 'react';
import { TextField, Button, Typography, Container } from '@mui/material';
import axios from 'axios';

const GoalRegistrationPage = () => {
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [deadline, setDeadline] = useState('');
  const [error, setError] = useState(null); // エラーハンドリング用の状態
  const [successMessage, setSuccessMessage] = useState(''); // 成功メッセージ用の状態

  const handleSubmit = async (event) => {
    event.preventDefault();
    if (title && description && deadline) {
      try {
        const userId = localStorage.getItem('userId');
        const response = await axios.post('http://localhost:8080/api/goals', {
          userId,
          title,
          description,
          targetDate: deadline,
        });
        console.log('登録成功:', response.data);
        setSuccessMessage('目標が正常に登録されました！'); // 成功メッセージを設定
        setTitle('');
        setDescription('');
        setDeadline('');
        setError(null); // エラーをクリア
      } catch (err) {
        console.error('登録失敗:', err);
        setError('目標の登録に失敗しました。'); // エラーメッセージを設定
        setSuccessMessage(''); // 成功メッセージをクリア
      }
    }
  };

  return (
    <Container maxWidth="sm">
      <Typography variant="h4" gutterBottom sx={{ marginTop: 4 }}>
        新しい目標を登録
      </Typography>

      {error && <Typography color="error">{error}</Typography>} {/* エラーメッセージの表示 */}
      {successMessage && <Typography color="primary">{successMessage}</Typography>} {/* 成功メッセージの表示 */}

      <form onSubmit={handleSubmit}>
        <TextField
          label="目標タイトル"
          fullWidth
          required
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          margin="normal"
        />

        <TextField
          label="目標の説明"
          fullWidth
          required
          value={description}
          onChange={(e) => setDescription(e.target.value)}
          margin="normal"
          multiline
          rows={4}
        />

        <TextField
          label="締め切り"
          type="date"
          fullWidth
          required
          value={deadline}
          onChange={(e) => setDeadline(e.target.value)}
          margin="normal"
          InputLabelProps={{
            shrink: true,
          }}
        />

        <Button type="submit" variant="contained" color="primary" fullWidth style={{ marginTop: '16px' }}>
          登録
        </Button>
      </form>
    </Container>
  );
};

export default GoalRegistrationPage;
   
